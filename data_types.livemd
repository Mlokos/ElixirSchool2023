# Data Types

## Numbers

Elixir have 2 types to work with numbers: integers and floats. \
Notes: Integers automatically expand memory they take to accomodate values (e.g. from int's to bigInt's)

<!-- livebook:{"force_markdown":true} -->

```elixir
# Integer examples

1
+2
-3
1_000_000_000

12.345
-2.71
3.14e-10
123_456.789_1011e23
```

Arithmetic operations work as in most programming languages (+, -, *, /, div/2, rem/2)

## Atoms

An atom is a constant whose value is its own name.

```elixir
:apple
# :apple == :orange
# is_atom(:apple)
```

## Booleans

Booleans are in fact just atoms :true and :false. In Elixir boolean logic there is a concept of truthly values. There is no separare value for nil therefore atom :nil is used. You can type nil for simplicity sake. Boolean operators && and || consider nil to be the same as false and anything else is consifered to be true. Operator ! negates the truthly values.

```elixir
# true
# true == :true
# true === :true
# !true
# ! :true

# Truthly values
# nil
# ! nil
# ! :whatever
# nil || :something
# true && :something
```

## Chars

Chars are stored as their unicode values (integers).

```elixir
# ?a
# \n
# ?a == 97
# "hello"
# "hello" <> <<0>>
```

## String

String are delimited by double quotes, and are encoded in UTF-8. They also support string interpolation, escape sequences. Internally represented by contiguous sequences of bytes known as binaries.

```elixir
a = :world
"hello #{a}"
IO.puts("hello\nworld")
is_binary("hello")
```

## Tuples

Group of elements with constant size. Fast access time than lists

```elixir
tuple = {:ok, "hello"}
tuple_size({:ok, "hello"})
elem(tuple, 1)
put_elem(tuple, 1, "world")
```

## Lists

Elixir uses square brackets to specify a list of values. Values can be of any type, and lists can be concatenated or subtracted using the `++/2` and `--/2` operators.

```elixir
# []
# [1]
# [:asdf, 1, "apple", {:tupple, 2}]

# [1, 2, 3]
# [1 | [2, 3]]
# [1 | [2 | [3]]]
# [1 | [2 | [3 | []]]]

# helpers hd/1 tl/1
list = [:a, :b, :c]
hd(list)
tl(list)
```

## Keyword lists

List consisting of 2-item tuples where the first element is an atom and the second element can be any value. Keyword list have 3 special characterisitcs:

* keys must be atoms
* keys are ordered
* keys can be given more then once

```elixir
[{:trim, true}] == [trim: true]
# usual list operations are available
list = [a: 1, b: 2]
list ++ [c: 3]
```

## Maps

Maps are created using `%{}` syntax, classic key-value store.

```elixir
# %{}
# Map.new()

# computer = %{
#   :type => :pc,
#   "graphics card" => ["GTX", 760],
#   {:processor, "intel"} => [{8, :cores}, {:type, :x86}]
# }

# computer[:type]
# computer[{:processor, "intel"}]
# computer[:not_exixsting_key]

# computer.type
# computer.not_exixsting_key
# computer.

# laptop = %{computer | :type => :laptop}
# laptop = %{computer | :sound => {:serround, 5.1}}
# laptop = Map.put(computer, :sound, {:serround, 5.1})

# tablet = %{:type => %{divice_type: :tablet, os: :android}}

# tablet.type.os
# tablet[:type].os
# tablet.type[:os]
# tablet[:type][:os]
```

## Structs

Structs are extensions built on top of maps that provide compile-time checks and default values.

```elixir
defmodule Device do
  defstruct devide_type: nil,
            os: :linux,
            processor: nil
end
```

```elixir
# pc = %Device{
#   devide_type: :pc
# }

# pc
# pc.os

# tablet = %Device{
#   devide_type: :tablet,
#   processor: {:intel, :x86},
#   os: :android
# }

# tablet
```
