# Class 3 - GenServers and Supervisors

## GenServer

A behaviour module for implementing the server of a client-server relation.

[Read more here](https://hexdocs.pm/elixir/GenServer.html)

OTP is a set of Erlang libraries, which consists of the Erlang runtime system, a number of ready-to-use components mainly written in Erlang, and a set of design principles for Erlang programs. [Learn more about Erlang and OTP.](https://www.erlang.org/doc/system_architecture_intro/sys_arch_intro.html)

In Elixir we this functionality is implemented in `Application`, a component implementing some specific functionality with a standardized directory structure, configuration, and life cycle. Applications are loaded, started, and stopped.

```elixir
defmodule KV do
  def start_link do
    Task.start_link(fn -> loop(%{}) end)
  end

  defp loop(map) do
    receive do
      {:get, key, caller} ->
        send(caller, Map.get(map, key))
        loop(map)

      {:put, key, value} ->
        loop(Map.put(map, key, value))
    end
  end
end
```

```elixir
defmodule Stack do
  use GenServer

  # Callbacks

  @impl true
  def init(stack) do
    {:ok, stack}
  end

  @impl true
  def handle_call(:pop, _from, [head | tail]) do
    {:reply, head, tail}
  end

  @impl true
  def handle_cast({:push, element}, state) do
    {:noreply, [element | state]}
  end
end
```

```elixir
# Start the server
{:ok, pid} = GenServer.start_link(Stack, [:hello])

# This is the client
GenServer.call(pid, :pop)
# => :hello

GenServer.cast(pid, {:push, :world})
# => :ok

GenServer.call(pid, :pop)
# => :world
```

## GenServer Client/Server APIs

```elixir
defmodule Stack2 do
  use GenServer

  # Client

  def start_link(default) when is_list(default) do
    GenServer.start_link(__MODULE__, default)
  end

  def push(pid, element) do
    GenServer.cast(pid, {:push, element})
  end

  def pop(pid) do
    GenServer.call(pid, :pop)
  end

  # Server (callbacks)

  @impl true
  def init(stack) do
    {:ok, stack}
  end

  @impl true
  def handle_call(:pop, _from, [head | tail]) do
    {:reply, head, tail}
  end

  @impl true
  def handle_cast({:push, element}, state) do
    {:noreply, [element | state]}
  end
end
```

```elixir
{:ok, pid} = Stack2.start_link([]) |> IO.inspect(label: :START_LINK)

Stack2.push(pid, :hello) |> IO.inspect(label: :PUSH)
Stack2.pop(pid) |> IO.inspect(label: :POP)
```

## GenServer Name registration

```elixir
defmodule Stack3 do
  use GenServer

  # Callbacks

  @impl true
  def init(stack) do
    {:ok, stack}
  end

  @impl true
  def handle_call(:pop, _from, [head | tail]) do
    {:reply, head, tail}
  end

  @impl true
  def handle_cast({:push, element}, state) do
    {:noreply, [element | state]}
  end
end
```

```elixir
GenServer.start_link(Stack3, [:hello], name: Stack3)

GenServer.cast(Stack3, {:push, :world}) |> IO.inspect(label: :PUSH)
GenServer.call(Stack3, :pop) |> IO.inspect(label: :POP)
```

## GenServer callbacks

* handle_call/3 - synchronous, receives messages via GenServer.call/3
* handle_cast/2 - asynchronous, receives messages via GenServer.cast/2
* handle_info/2 - receives messages from within the system, e.g. from itself

```elixir
defmodule MyApp.Periodically do
  use GenServer

  def start_link(_) do
    GenServer.start_link(__MODULE__, %{})
  end

  @impl true
  def init(state) do
    # Schedule work to be performed on start
    schedule_work(3_000)

    {:ok, state}
  end

  @impl true
  def handle_info(:work, state) do
    # Do the desired work here
    IO.inspect("In handle info")
    # Reschedule once more
    schedule_periodic_work(5_000)

    {:noreply, state}
  end

  defp schedule_periodic_work(period) do
    DateTime.utc_now() |> IO.inspect(label: :IN_SCHEDULE_PERIODIC_WORK)
    # We schedule the work to happen in 2 hours (written in milliseconds).
    # Alternatively, one might write :timer.hours(2)
    Process.send_after(self(), :work, period)
  end
end
```

```elixir
GenServer.start_link(MyApp.Periodically, [], name: MyApp.Periodically)
```

## GenServer message processing

* each GenServer has it's own mailbox
* messages in mailbox are processed in order
* large number of messages or long time of processing?

Delegate job to another process!!!

```elixir
defmodule Stack do
  use GenServer

  # Callbacks

  @impl true
  def init(stack) do
    {:ok, stack}
  end

  @impl true
  def handle_call(:pop, _from, [head | tail]) do
    {:reply, head, tail}
  end

  def handle_call(:reply_in_one_second, from, state) do
    spawn(fn ->
      Process.sleep(1000)
      GenServer.reply(from, :replied_after_one_second)
    end)

    {:noreply, state}
  end

  @impl true
  def handle_cast({:push, element}, state) do
    {:noreply, [element | state]}
  end
end
```

## Supervisor

* a process which supervises other processes - parent watches over children
* used to build supervision tree

```elixir
# Class 2 Counter and Warden

defmodule Counter do
  use GenServer

  def start_link(arg) when is_integer(arg) do
    GenServer.start_link(__MODULE__, arg, name: __MODULE__)
  end

  ## Callbacks

  @impl true
  def init(counter) do
    {:ok, counter}
  end

  @impl true
  def handle_call(:get, _from, counter) do
    {:reply, counter, counter}
  end

  def handle_call({:bump, value}, _from, counter) do
    {:reply, counter, counter + value}
  end
end
```

How to start supervisor:

* define list of children
* call Supervisor.start_link()

```elixir
children = [
  # The Counter is a child started via Counter.start_link(0)
  %{
    id: Counter,
    start: {Counter, :start_link, [0]}
  }
]

# Now we start the supervisor with the children and a strategy
{:ok, pid} = Supervisor.start_link(children, strategy: :one_for_one)

# After started, we can query the supervisor for information
Supervisor.count_children(pid)
Supervisor.which_children(pid)
# => %{active: 1, specs: 1, supervisors: 0, workers: 1}
```

```elixir
GenServer.call(Counter, :get)
# => 0

GenServer.cast(Counter, {:bump, 3})
# => 0

GenServer.call(Counter, :get)
# => 3
```

## Supervisor configuration

### Max restarts

`:max_restarts` - maximum number of child restarts allowed in a time frame, default: 3

### Max seconds

`:max_seconds` - the time frame in which `:max_restarts` applies, default: 5

### Name

`:name` - a name to register the supervisor process

### Strategies

`:strategy` - the supervision strategy, how to manage crashed children processes

* `:one_for_one` - if a child process terminates, only that process is restarted
* `one_for_all` - if a child process terminates, all other child processes are terminated and then all child processes are restarted
* `:rest_for_one` - if a child process terminates, the terminated child process and the rest of the children started AFTER IT are terminated and restarted

## Supervison start, shutdown, restarts

### Supervisor start

We can distinguish following steps on supervisor start:

* traverse all child specifications and start each child in defined order
* call (typically) `start_link/1` for each child, function MUST return `{:ok, pid}`
* child process uses `init/1` to start its work.

### Supervisor stop

On supervisor shutdown:

* traverse each children process in REVERSE order
* send `Process.exit(child_pid, :shutdown)` signal to child
* await for 5s for child exit, if it doesn't happend send `:kill` signal

### Child restart strategies

Child is restarted depending `:restart` strategy, possible values:

* `:permanent` - child is always restarted
* `:transient` - child proces is restarted only of it terminates abnormally
* `:temporary` - child process is never restarted

### Child exit reasons

* `:normal` - standard exit reason, no restart in transient mode, linked processes do not exit
* `:shutdown` or `{:shutdown, term}`, no restart in transent mode, linked processes exit with same reason unles they're trapping exits
* any other term - exit is logged, restarts in transient mode, linked processes exit with same reason

**IMPORTANT**
If supervisor reaches maximum restart intensity it will exit with `:shutdown` reason. In this case the supervisor will only be restarted if its child specification was defined with the `:restart` option set to `:permanent`

## What happens if supervisor crashes?

Short answer - it propagetes errors up the supervision tree

Long answer - if one of the supervisor children crashed and can't be restarted supervisor after reaching `:max_restarts` in `:max_seconds` will crash and send sends signal that it terminated abruptly to its own supervisor, and so on and so on until we reach top of the supervision tree and the whole Application is terminated and tries to restart
