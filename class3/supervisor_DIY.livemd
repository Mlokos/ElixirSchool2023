# GenServer, Supervisors DYI

## GenServer - Shop Inventory Cache

Implement GenServer for storing shop inventory. You should be able to perform basic CRUD operations (Create, Read, Update, Delete)

TIP: State of the GenServer can be stored as list or map

TIP: You can use `struct`, map or keyword to store product information, example fields: name, price

```elixir
defmodule ShopInventory do
  use GenServer

  # Client API
  def create_item(item) do
    # Your code here
  end

  def list_items() do
    # Your code here
  end

  def delete_item() do
    # Your code here
  end

  def get_item_by_name(name) do
    # Your code here
  end

  def start_link(_opts) do
    GenServer.start_link(__MODULE__, %{}, name: __MODULE__)
  end

  # Server API
  def init(state) do
    {:ok, state}
  end

  def handle_call(_, _, state) do
    {:reply, _, state}
  end

  def handle_cast(_, state) do
    {:noreply, state}
  end
end
```

## Supervisor - Shop Supervisor

Using Shop Inventory GenServer from previous exercise implement Supervisor module with 3 different shop inventories.

## Shop Inventory - Advanced

Using GenServer `ShopInventory` from first exercise instead using GenServer state as storage medium for shop inventory use [ETS](https://elixir-lang.org/getting-started/mix-otp/ets.html)
